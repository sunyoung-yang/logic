1. 아래의 2차원 배열의 그림을 그리시오.
int[][] arr = {
   {11, 22, 33},
   {44, 55, 66}, 
   {77, 88, 99}
};

2. 아래를 프로그래밍 하시오.
 - 10 개의 배열을 선언후 1부터 100까지의 수중에서
랜덤하게 생성하여 10개의 배열에 넣는다.
- 아래의 max 변수에 해당 배열의 값중에 최대값을 반환하는 함수를 만드시오. 

public class MaxNunber {

	static int getMaxValue() {
		
		final int MAX_NUM=100;
		int max=0;
		
		int[]arr=new int[10];
		Random random = new Random();
		
		for(int i=0;i<arr.length;i++) {			//length는 범위
			arr[i]=(random.nextInt(MAX_NUM))+1;  //arr[i]는 숫자를 나타내
			System.out.println(arr[i]+" ");
		}
		for(int i=1;i<arr.length;i++) {
			if(max<arr[i]) {
				max=arr[i];//max의 초기값은 0! 당연 arr[0]은 0보다 크지 그걸 for문을 통해 반복하다 젤 큰걸 고르는거야
			}
		}
		System.out.println("최대값은 "+max +" 입니다.");
		return max;
	}
	public static void main(String[] args) {
		
		getMaxValue();

	}

}


3. 아래를 프로그래밍 하시오.
 - 10 개의 배열을 선언후 1부터 100까지의 수중에서
랜덤하게 생성하여 10개의 배열에 넣는다.
- sortArr 에 내림차순으로 sorting 된 배열을 리턴한다.

int[] arr = new int[10];
....
int[] sortArr = getSortDESC(arr) 
.....

6. 아래를 프로그래밍 하시오.
 - Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
- 해당 배열중 넓이가 최대값을 찾아서 리턴

Rectangle[] rec = new Rectangle[3];
........
Rectangle maxRec = getMaxRec(rec) 
s.o.p("최대사각형 넓이는" +maxRec.getArea())

7. 아래를 프로그래밍 하시오.
- Rectangle 배열 4개를 만든후 스캐너 객체로 가로와 세로를 입력하여 4개의 객체를 배열에 할당한다 
-  getSortingRec 사각형 배열을 내림차순 정렬한다.
-정렬이 제대로 되었는지 배열에 저장된 객체의 getArea()함수를 순서대로 호출한다.

Rectangle[] rec = new Rectangle[3];
........
Rectangle[] recSorting = getSortingRec(rec) 
......

6. 상속이란 무엇인가?
하위 클래스가 상위클래스를 호출하여 하위클래스에서 상위 클래스의 함수나 변수를 사용하려는 것

7. 다중상속이란?
두개의 상위클래스를 하나의 하위클래스에서 호출 및 생성자 지정하려는 것 (자바에서 쓸 수 없음)

8. 다음 TV 클래스가 있다.

class TV {
	private int size;
	public TV(int size) { this.size = size; }
	protected int getSize() { return size; }
}

다음 main() 메소드와 실행 결과를 참고하여 TV를 상속받은 ColorTV 클래스를 작성하라.

public static void main(String args[]) {
		colorTV myTV = new ColorTV(32, 1024);
		myTV.printProperty();
	}

=====
출력:32인치 1024컬러

class TV {
	static int size;
	public TV(int size) { 
		this.size = size; 
		}
	protected int getSize() { 
		return size; 
		}
}

class  ColorTV extends TV {
	int paint;

	public ColorTV(int size,int paint){
		super(size);
		this.paint=paint;
	}
	
	public void printProperty() {
		System.out.println(size+"인치, "+ paint+"컬러");
		
	}
}

public class TVMain {

	public static void main(String[] args) {
		ColorTV myTV = new ColorTV(32, 1024);
		myTV.printProperty();
	}

}

9. 문제

다음 main() 메소드와 실행 결과를 참고하여 ColorTV를 상속받는 IPTV 클래스를 작성하라.
public static void main(String args[]) {
		IPTV iptv = new IPTV("192.1.1.2", 32, 2048); // "192.1.1.2" 주소에 32인치, 2048 컬러
		iptv.printProperty();
	}
===출력
나의 IPTV는 192.1.1.2 주소의 32 인치 2048컬러

class ColorTV{
	static int size;
	public ColorTV(int size){
		this.size = size;
	}
	protected int getSize() { 
		return size; 
		}
}

class IPTV extends ColorTV {
	String add;
	int paint;
	
	public IPTV(String add,int size,int paint ) {
		super(size);
		this.add=add;
		this.paint=paint;
	}
	public void printProperty() {
		System.out.println("나의 IPTV는 "+ add+" 주소의 "+size+" 인치 "+paint+"컬러");
	}
}

public class TVMain {

	public static void main(String[] args) {
		
		IPTV iptv = new IPTV("192.1.1.2", 32, 2048); // "192.1.1.2" 주소에 32인치, 2048 컬러
		iptv.printProperty();
	}

}
10. 다음은 2차원 상의 한 점을 표현하는 Point 클래스이다.

class Point {
	private int x, y;
	public Point(int x, int y) { this.x = x; this.y = y; }
	public int getX() { return x; }
	public int getY() { return y; }
	protected void move(int x, int y) { this.x = x; this.y = y; }
}

Point를 상속받아 색을 가진 점을 나타내는 ColorPoint 클래스를 작성하라. 다음 main() 메소드를 포함하고 실행 결과와 같이 출력되게 하라.
======출력======
RED 색의 (10,20)의 점 입니다.

class Point {
	static int x, y;
	public Point(int x, int y) { this.x = x; this.y = y; }
	static int getX() { return x; }
	static int getY() { return y; }
	protected void move(int x, int y) { this.x = x; this.y = y; }
}

	class ColorPoint extends Point{
	
	public ColorPoint(int x,int y){
		super(x,y);
		
	}
	void getPoint() {
		System.out.println("RED 색의 ("+getX()+","+getY()+")의 점 입니다.");
	}
}

public class ColorPointMain {

	public static void main(String[] args) {
		
		ColorPoint col = new ColorPoint(10,20);
		col.getPoint();
	}

}

11.super의 용도 2가지에 대하여 설명하시오.
부모클래스를 자신의 클래스에 선언할때(상위 클래스 생성자 지정 및 호출)

12.protected 에 대하여 설명하시오.
부모클래스가 상속된 클래스내에서 선언 가능