  
1. 아래의 ThreadWithClass 와 ThreadWithRunnable 을 구현하시오.

public class Thread01 {

    public static void main(String[] args){

        ThreadWithClass thread1 = new ThreadWithClass();       // Thread 클래스를 상속받는 방법

        Thread thread2 = new Thread(new ThreadWithRunnable()); // Runnable 인터페이스를 구현하는 방법 

        thread1.start(); // 스레드의 실행
        thread2.start(); // 스레드의 실행
    }
}
-------------------------------------------------------------------
class ThreadWithClass extends Thread{
	@Override
	public void run() {
		for(int i=0;i<5;i++) {
			System.out.println(getName());
			
			try {
				Thread.sleep(10);
			}catch(InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}

class ThreadWithRunnable implements Runnable{
	@Override
	public void run() {
		for(int i=0;i<5;i++) {
			System.out.println(Thread.currentThread().getName());
		try {
			Thread.sleep(10);
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
		}
	}
}
public class Car {

    public static void main(String[] args){

        ThreadWithClass thread1 = new ThreadWithClass();      

        Thread thread2 = new Thread(new ThreadWithRunnable()); 

        thread1.start(); // 스레드의 실행
        thread2.start(); // 스레드의 실행
    }
}

2.웹서와 WAS에 대하여 설명하시오.
웹서버와 was를 구별짓는 것은 동적 서버 컨텐츠를 수행하는 가이다.
웹서버는 정적인 html이나 이미지를 제공하는 서버이고
was는 동적인 처리를 담당하는 서버이다.

사용자가 브라우저에게 요청을 하게 되면 웹서버와 was서버를 거쳐 응답이 돌아온다.
사용자 요청(웹 브라우저) > 웹서버 > was > 웹서버 > 웹 브라우저
참고)https://gap85.tistory.com/entry/WAS-%EC%99%80-%EC%9B%B9%EC%84%9C%EB%B2%84-%EC%9D%98-%EC%B0%A8%EC%9D%B4


3. .jsp 와 .html 의 차이는?
시간에 관한 코드를 작성할 때 
html은 정적이기에 관리자가 일일이 수정해야한다.
jsp는 동적이므로 코드를 한번만 작성하면 일일이 수정할 필요 없다.

4.html 8장 - 조별 학습