[lombok 사용법]

pom.xml안에 dependencies 아래에 복붙
(원래 있던 프로젝트 안에서 lombok코드 찾는 법: shift+ctrl+alt+L)

import lombok.Data;
import lombok.NoArgsConstructor;

@NoArgsConstructor		//인자 없는 생성자
@Data				//getter, setter 자동 생성
public class Student {
	private String name;
	private int id;
}






[Validator]
StudentValidator.java

public class StudentValidator implements Validator {

	@Override
	public boolean supports(Class<?> clazz) {
		return false;
	}

	@Override
	public void validate(Object obj, Errors errors) {
		System.out.println("validate()");
		Student student = (Student)obj;		//downcasting
		
		String studentName = student.getName();
		if(studentName == null || studentName.trim().isEmpty()) {
			System.out.println("studentName is null or empty");
			errors.rejectValue("name", "trouble");
			//polymorphism: Errors부모 BindingResult자식
		}
		
		int studentId = student.getId();
		if(studentId == 0) {
			System.out.println("studentId is 0");
			errors.rejectValue("id", "trouble");
		}
		
	}
	
}




StudentController.java

@Controller
public class StudentController {
	
	private static final Logger logger = LoggerFactory.getLogger(StudentController.class);
	@RequestMapping("/studentForm")
	public String studentForm() {
		return "createPage";
	}

	@RequestMapping("/student/create")
	public String studentCreate(Student student, BindingResult result) {
			//	command객체  검증(validation)을 위한 것
		
		String page = "createDonePage";
		
		StudentValidator validator = new StudentValidator();
		validator.validate(student, result);
		if(result.hasErrors()) {
			page = "createPage";
		}
		
		return page;
	}


}




[JUNIT]
대표적인 JAVA Testing Framework.
에릭 감마가 만들었음.
단위테스트 도구.

TDD(Test Driven Develpment)





@Spring
src/test/java -> edu.bit.ex -> JUnit Test Case -> CalculatorTest.java


import static org.junit.Assert.*;
import org.junit.Test;

public class CalculatorTest {

	@Test
	public void testAdd() {
		Calculator calculator = new Calculator();
		assertEquals(30, calculator.add(20, 20));
	}

}

Run As: JUnit Test






V-Model (폭포수 모델의 변형)

요구분석							인수 테스팅
	시스템설계				시스템 테스팅
		상세 설계			통합 테스팅
			코딩	단위 테스팅
			      구현





2. 아래의 인터페이스를 구현한 삼각형,사각형,원의 클래스를 구현하고, JUNIT를 이용하여 단위 테스트 하시오.
-interface IShape{
	-double getArea();
}
------------------------------------------
<circle>
import lombok.Data;
import lombok.NoArgsConstructor;

@NoArgsConstructor
@Data
class Circle implements IShape{
	private int radius;
	
	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return radius * radius * Math.PI;
	}
	
	public double getArea(int radius) {
		// TODO Auto-generated method stub
		return radius * radius * Math.PI;
	}
}

<triangle>
@NoArgsConstructor
@Data
class Triangle implements IShape{
	private int width, height;

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return width * height * 0.5;
	}
	
	public double getArea(int width, int height) {
		// TODO Auto-generated method stub
		return width * height * 0.5;
	}
}

<rectangle>
@NoArgsConstructor
@Data
class Rectangle implements IShape{
	private int width, height;

	@Override
	public double getArea() {
		// TODO Auto-generated method stub
		return width * height;
	}
	
	public double getArea(int width, int height) {
		// TODO Auto-generated method stub
		return width * height;
	}
}

<test>
public class IShapeTest {

	@Test
	public void testCir() {
		Circle circle = new Circle();
		double area = circle.getArea(10);
		assertEquals(314, area, 0);
		
		
	}
	
	@Test
	public void testTri() {
		Triangle triangle = new Triangle();
		double area = triangle.getArea(10, 20);
		assertEquals(100, area, 0);
		
		
	}
	
	@Test
	public void testRec() {
		Rectangle rectangle = new Rectangle();
		double area = rectangle.getArea(10, 20);
		assertEquals(200, area, 0);
	}
	

}



3.BOM 이란 무엇인가?
Browser Object Model. 브라우저와 관련된 객체.

BOM은 DOM과 달리 W3C의 표준 객체 모델은 아님.
하지만 자바스크립트가 브라우저의 기능적인 요소들을 직접 제어하고 관리할 방법을 제공.

4.window 객체란 무엇인가?

- 브라우저 전체를 담당
- 모든 객체의 조상
- 전역객체 // .window 생략가능

window 객체가 가지고있는 객체
> document 객체 - DOM
> screen 객체 - 화면에 대한 정보
> location 객체 - 주소에 대한 정보
> navigator 객체 - 브라우저 / 운영체제 정보
> history 객체 - 앞으로 / 뒤로가기

window 객체의 method
alert( )
console.log( )
open( )
close( )
setTimeout( )
setInterval( )
encodeURI( )
decodeURI( )
등

5.아래를 프로그램 하시오.
- 현재 탭에서 www.google.com 을 여시오.

window.open("www.google.com", "openWindow", "width=500, height=400");
