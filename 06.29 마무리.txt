1.게시판을 모델2로 짜기 위한 설계도를 그리시오.
(client - controller - -command -dao-db -view)

2.RequestDispatcher의 역할은?
RequestDispatcher는 클라이언트로부터 최초에 들어온 요청을 JSP/Servlet 내에서 
원하는 자원으로 요청을 넘기는(보내는) 역할을 수행하거나, 
특정 자원에 처리를 요청하고 처리 결과를 얻어오는 기능을 수행하는 클래스
즉 /a.jsp 로 들어온 요청을 /a.jsp 내에서 RequestDispatcher를 사용하여 b.jsp로 요청을 보낼 수 있습니다. 
또는 a.jsp에서 b.jsp로 처리를 요청하고 b.jsp에서 처리한 결과 내용을 a.jsp의 결과에 포함시킬 수 있습니다.

[현재 request에 담긴 정보를 저장하고 있다가 
다음,다다음 페이지에서도 해당 정보를 볼 수 있게 계속 저장]

3.게시판(list.jsp)을 모델2로 짜시오.(feat 외우시오)
[BDTO.java]
//dto 생성 getter/setter 필수

package edu.bit.ex.dto;

import java.sql.Timestamp;

public class BDto {

	
	int bId;
	String bName;
	String bTitle;
	String bContent;
	Timestamp bDate;
	int bHit;
	int bGroup;
	int bStep;
	int bIndent;
	
	public BDto() {}
	
	public BDto(int bId, String bName, String bTitle, String bContent, Timestamp bDate, int bHit, int bGroup, int bStep,
			int bIndent) {
		super();
		this.bId = bId;
		this.bName = bName;
		this.bTitle = bTitle;
		this.bContent = bContent;
		this.bDate = bDate;
		this.bHit = bHit;
		this.bGroup = bGroup;
		this.bStep = bStep;
		this.bIndent = bIndent;
	}

	public int getbId() {
		return bId;
	}

	public void setbId(int bId) {
		this.bId = bId;
	}

	public String getbName() {
		return bName;
	}

	public void setbName(String bName) {
		this.bName = bName;
	}

	public String getbTitle() {
		return bTitle;
	}

	public void setbTitle(String bTitle) {
		this.bTitle = bTitle;
	}

	public String getbContent() {
		return bContent;
	}

	public void setbContent(String bContent) {
		this.bContent = bContent;
	}

	public Timestamp getbDate() {
		return bDate;
	}

	public void setbDate(Timestamp bDate) {
		this.bDate = bDate;
	}

	public int getbHit() {
		return bHit;
	}

	public void setbHit(int bHit) {
		this.bHit = bHit;
	}

	public int getbGroup() {
		return bGroup;
	}

	public void setbGroup(int bGroup) {
		this.bGroup = bGroup;
	}

	public int getbStep() {
		return bStep;
	}

	public void setbStep(int bStep) {
		this.bStep = bStep;
	}

	public int getbIndent() {
		return bIndent;
	}

	public void setbIndent(int bIndent) {
		this.bIndent = bIndent;
	}

}
-------------------------------------------------------------
[BCommand interface 생성]
package edu.bit.ex.command;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public interface BCommand {
	void execute(HttpServletRequest request, HttpServletResponse response);
	
	
}
--------------------------------------------------------------
[BListCommand //자손이 구현]
package edu.bit.ex.command;

import java.util.ArrayList;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;


import edu.bit.ex.dao.BDao;
import edu.bit.ex.dto.BDto;

public class BListCommand implements BCommand {
	
	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) {
		
		BDao dao = new BDao();
		ArrayList<BDto> dtos = dao.list();
		
		request.setAttribute("list",dtos); //request에 저장을 한다.(request,page,application,총 4가지가 있지)
	} 
}
----------------------------------------------------------------
[BoardFrontController.java 프론트 컨트롤러 서블릿]
//확장자 패턴으로 연습 (실무는 restful패턴)

package edu.bit.ex.controller;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import edu.bit.ex.command.BCommand;
import edu.bit.ex.command.BListCommand;

/**
 * Servlet implementation class DogfrontController
 */
@WebServlet("*.do")// 확장자 패턴
public class BfrontController extends HttpServlet {
	private static final long serialVersionUID = 1L;
       
    /**
     * @see HttpServlet#HttpServlet()
     */
    public BfrontController() {
        super();
        // TODO Auto-generated constructor stub
    }

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("doGet");
		actionDo(request, response);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		System.out.println("doPost");
		actionDo(request, response);
		
	}
	private void actionDo(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {  //프라이빗 함수로 바꿈
		System.out.println("actionDo");
		request.setCharacterEncoding("EUC-KR");		//request객체를 받으려면 try, catch로 감싸줘야 함 
								//예외처리: runtimexception 제외 전부 에러처리 해줘야 함
		String viewPage = null;
		BCommand command = null;
		
		// http:// ... /jsp_mvcboard/list.do
		String uri = request.getRequestURI();
		String conPath = request.getContextPath();
		String com =uri.substring(conPath.length());
		
		System.out.println("URI : "+uri);
		System.out.println("comPath : "+conPath);
		System.out.println("com : "+com);

		if(com.equals("/list.do")) {			
			command = new BListCommand();	//polymorphism: BCommand(부모interface)가 BListCommand(자식) 불러옴 by 컨트롤러
			command.execute(request, response); 	//Command가 request를 execute하면 BListCommand의 execute가 실행되면서
									//그 안의 list가 전부 호출됨.
									//여기까지가 '클라이언트-FrontController-Command-DAO-DTO-DB'과정에서 불러온
									//request객체를 담아내는 과정
			viewPage = "list.jsp";				//FrontController가 ui화면에게 응답
	}
	
		RequestDispatcher dispatcher = request.getRequestDispatcher(viewPage);
		dispatcher.forward(request, response);
		//dispatcher객체가 request, response정보를 list.jsp에 즉, list_jsp.class에 넘겨준다.
		//mvp형식을 지키기 위해서는 jsp페이지에서 객체 생성을 생략해야 함. 그래서 frontcontroller에서 request로 얻은 정보를 미리 객체생성 후 forward
		//시키면 jsp에서는 객체 생성 없이 request정보를 바로 받아올 수 있음.
	}
}
-------------------------------------------------------------
[list.jsp]
<%@ page language="java" contentType="text/html; charset=EUC-KR"
    pageEncoding="EUC-KR"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
	<head>
		<meta charset="EUC-KR">
		<title>Insert title here</title>
</head>
	<body>
		<table width="500" cellpadding="0" cellspacing="0" border="1">
			<tr>
				<td>번호</td>
				<td>이름</td>
				<td>제목</td>
				<td>날짜</td>
				<td>히트</td>
			</tr>
				<!-- 중요 -->
				<!-- request.setAttribute("list",dtos) 의 리스트다 -->
			<c:forEach var="dto" items="${list }">
			<tr>
			<td>${dto.bId }</td>
			<td>${dto.bName }</td>
			<td> 
				<c:forEach begin="1" end="${dto.bIndent }">-</c:forEach>	<!-- 댓글에 대한 가로찍기 -->
				<a href="content_view.do?bId=${dto.bId }">${dto.bTitle }</a> <!-- get방식으로 넘긴다 -->
			</td>
			
				<td>${dto.bDate }</td>
				<td>${dto.bHit }</td>
				
			</tr>
			</c:forEach>
			<tr>
				<td colspan="5"> <a href="write_view.do">글작성</a> </td>
			</tr>
		</table>
	</body>
</html>


4.게시판 list.jsp 의 SQL 구문은?(feat 이것도 외우시오)
create table mvc_board(
bId number(4,0) primary key,
bName varchar2(20),
bTitle varchar2(100),
bContent varchar2(300),
bDate date default sysdate,
bHit number(4) default 0,
bGroup number(4),
bSite number(4),
bIndent number(4)
);

=================================
5.부서중에 sal합계가 가장큰 부서의 부서명과 sal합계를 구하시오. 

SELECT DNAME, SUM(SAL) 
FROM EMP E,DEPT D 
WHERE E.DEPTNO = D.DEPTNO GROUP BY DNAME 
HAVING SUM(SAL)=(SELECT MAX(SUM(SAL)) FROM EMP GROUP BY DEPTNO );

6.emp테이블에서 부서코드가 10또는 20또는 30또는 40인 데이터의 급여의 grade를 출력하시오(사원ID,사원명,sal,grade) 
SELECT DEPTNO, EMPNO,ENAME,SAL,GRADE 
FROM EMP E, SALGRADE S 
WHERE E.DEPTNO IN(10 ,20,30,40) 
ORDER BY GRADE;
