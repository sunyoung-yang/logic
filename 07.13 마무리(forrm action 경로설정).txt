index.jsp 

**<form> 태그의 action 속성은 폼 데이터(form data)를 서버로 보낼 때 해당 데이터가 도착할 URL을 명시.

<body>
	
	form action의 "studentView" 앞에 생략된 url은 was(tomcat)가 자동으로 생성해서 넣어줌.
					↓
				http://localhost:8282/ex/

	<form action="studentView"(상대경로) method="post">
		이름 : <input type="text" name="name"><br /> 나이 : <input
			type="age" name="age"><br /> 학년 : <input type="classNum"
			name="classNum"><br /> 반 : <input type="gradeNum"
			name="gradeNum"><br /> <input type="submit" value="전송">
	</form>
</body>

"/"(root)에 대한 톰켓의 해석: http://localhost:8282 여기까지. context명은 생략.
따라서 form action="/studentView"(절대경로)로 설정해두면 http://localhost:8282/studentView로 이동.


====================================================================

[실무] <form action="/${pageContext.request.contextPath}/studentView" method="post">

====================================================================
[디버깅] 아래 태그를 써놓고 index페이지 켜고 F12로 콘솔창 들어감. elements창 위에 해당 href에 커서 위치시키면
각각의 주소로 들어갔을 때 어떤 url이 생성되는지 보임.

<a href="studentView" target="_blank">태그</a>
<a href="/studentView" target="_blank">태그</a>
<a href=../ex/studentView" target="_blank">태그</a>








1.Restful 이란?
[REST]
HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, 
HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용.
즉, REST는 자원 기반의 구조(ROA, Resource Oriented Architecture) 설계의 중심에 Resource가 있고 
HTTP Method를 통해 Resource를 처리하도록 설계된 아키텍쳐.
웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여한다.

[CRUD Operation]
Create : 생성(POST)
Read : 조회(GET)
Update : 수정(PUT)
Delete : 삭제(DELETE)
HEAD: header 정보 조회(HEAD)

[REST가 필요한 이유]
‘애플리케이션 분리 및 통합’
‘다양한 클라이언트의 등장’
최근의 서버 프로그램은 다양한 브라우저와 안드로이폰, 아이폰과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.
이러한 멀티 플랫폼에 대한 지원을 위해 서비스 자원에 대한 아키텍처를 세우고 이용하는 방법을 모색한 결과, 
REST에 관심을 가지게 되었다.

[REST 구성 요소]
1. 자원(Resource): URI
모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.
자원을 구별하는 ID는 ‘/groups/:group_id’와 같은 HTTP URI 다.
Client는 URI를 이용해서 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 Server에 요청한다.

2. 행위(Verb): HTTP Method
HTTP 프로토콜의 Method를 사용한다.
HTTP 프로토콜은 GET, POST, PUT, DELETE 와 같은 메서드를 제공한다.

3. 표현(Representation of Resource)
Client가 자원의 상태(정보)에 대한 조작을 요청하면 Server는 이에 적절한 응답(Representation)을 보낸다.
REST에서 하나의 자원은 JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타내어 질 수 있다.
JSON 혹은 XML를 통해 데이터를 주고 받는 것이 일반적이다.

https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html

2.@PathVariable의 사용 법은?
경로(path)에 변수를 넣어 요청 메소드에서 파라미터로 이용할 수 있음.

url : http://localhost:8282/ex/index/10

[controller]
@RequestMapping("/studentId/{studentId}")
public String 함수명(@PathVariable String studentId, Model model)

3.절대 경로와 상대 경로에 대하여 설명하시오.
절대 주소: 'http://'부터 시작해서 (또는 'https://') 전체의 주소를 다 적는 방식
<form action="http://localhost:8282/ex/studentview">

상대 주소: 해당 파일을 기준으로 주소를 찾는 것
<form action="studentview"> 같이 파일만 넣는 것인데 이때 이 파일은 어느 폴더에 들어가 있지 않아야 해

4.
① a href="studentView" 
상대경로로 현재 위치에서 studentView를 더한 주소가 된다

ex ) 현재주소가 http://localhost:8282/컨텍스트패스/index 라면
	        _____________________________________
			현재주소 

현재주소에 studentView 를 더한 http://localhost:8282/컨텍스트패스/studentView 로 이동


② a href="/studentView"
/로 시작한 절대경로이다

ex) / 는 http://localhost:8282/ 가 생략되어있는 형태로

이동하는 주소는 http://localhost:8282/studentView 로 가게되는데
컨텍스트 패스를 넣지않고 바로 studentView 가 붙었으므로 404 오류 발생


③ a href="../spring_14_2_ex1_srpingex/studentView"
../ 로 상위 위치를 기준으로 잡은 상대경로이다

ex ) 현재주소가 http://localhost:8282/컨텍스트패스/index 라면
	        ______________________
		  상위주소

상위주소( ../ )에 컨텍스트패스/StudentView 를 더했으므로
=> http://localhost:8282/컨텍스트패스/studentView 로 이동


6.javascript로 시간을 표시하는 웹페이지를 만드시오.
-document.write을 활용하시오.
-시간 가운데 정렬 시킬것.
<style>
	#total{
	text-align:center;
	}
</style>
</head>
<body>
	<div id="total">
	<script>
		var objDate1 = new Date();
		document.write(objDate1);
	</script>
	</div>
</body>