1.Model 객체에 대하여 설명하시오.
Model 객체를 파라미터로 받아서 데이터를 뷰로 넘기는 역할
model.addAttribute("key",value) 를 사용하여 데이터를 view로 넘긴다.

2.ModelAndView 객체의 사용법은?
model과 view를 동시에 설정할 수 있다.
ModelAndView 객체 생성 후, addObject("key",value)를 이용하여 데이터를 입력한다.
setViewName()으로 뷰페이지 이름을 설정할 수 있다.
ModelAndView 객체를 리턴한다.

3.아래를 @을 설명하시오.
-@RequestParam
파라미터의 값과 이름을 함께 전달하는 방식일때 사용한다.
httpServletRequest역할을 해주기 때문에 getParameter()를 사용할 필요 없다.


4.req.getParameter 보다 @RequestParam 의 장점은?
request.getParameter 는 무조건 String 형 으로 추출
@RequestParam 은 개발자가 원하는 형태로 추출한다는 장점이 있다

5.command 객체란?
회원가입과 같은 데이터 양이 많을 경우 유용하다.
 - 유의할점 2가지는?
	default 생성자가 있어야 한다. (이 생성자를 통해 객체를 만들기 때문)
	request 로 받아온 파라미터의 key 가 커맨드객체의 멤버변수명과 일치해야 한다


6.HttpServletRequest 객체를 설명하시오.
사용자가 요청한 데이터를 받는 객체이다.
HttpServletRequest 객체가 Http protocol에 대한 내용을 캡슐화 하여 담아둔다.
get방식) url의 정보가 httpServletRequest로 들어가

7.정보은닉이란?
모든 객체지향 언어적 요소를 활용하여 객체에 대한 구체적인 정보를 노출시키지 않도록 하는 기법.
( getter / setter 와 같은 함수를써서 접근 가능 ) 


8.아래를 프로그래밍 하시오.
-프로토타입으로 함수를 만들것

function Scoring(name,scoreFirst,scoreSecond,scoreThird){
		this.name=name;
		this.scoreFirst=scoreFirst;
		this.scoreSecond = scoreSecond;
		this.scoreThird = scoreThird;
			
	};
		
	Scoring.prototype.getTotal = function() {
		return this.scoreFirst+this.scoreSecond+this.scoreThird;
	};
	Scoring.prototype.getAverage= function() {
		return this.getTotal()/3;
	};
-------------------------------------------------------------------------------------------

		var player1 = new Scoring("홍길동", 99, 90, 92);
		console.log(player1.player + "의 총점 : " + player1.getTotal());
		console.log(player1.player + "의 평균 : " + player1.getAverage());
			
		var player2 = new Scoring("홍길순", 80, 90, 85);
		console.log(player2.player + "의 총점 : " + player2.getTotal());
		console.log(player2.player + "의 평균 : " + player2.getAverage());


9.아래를 스프링 mvc로 프로그래밍 하시오.
이름 국어 영어 수학 을 입력 하는 페이지를 만든후, 이름과 총점 평균을 클라이언트에게 보내줄것
1)조건 - command 객체 사용 할것
2)롬복이 사용 할것.
[Grade](Command)
public class Grade {

	private String name;
	private int kor;
	private int math;
	private int eng;
	private double sum;
	private double avg;

[gradeInput]
<form action="/ex/test/gradeOutput" method="post">
		name : <input type="text" name="name"><br>
		korean : <input type="text" name="kor"><br>
		math : <input type="text" name="math"><br>
		english : <input type="text" name="eng"><br>
		
		<input type="submit" value="submit">
		<input type="reset" value="reset">
	</form>

[gradeOutput]
name : ${grade.name} <br>
	 korean : ${grade.kor} <br>
	 math : ${grade.math} <br>
	 english : ${grade.eng} <br>
	  <br>
	 총합 : ${grade.sum}  <br>
	 평균 : ${grade.avg}

[Controller]
@RequestMapping("/test/gradeInput")
	public String gradeInput( ) {
	
		return "test/gradeInput";
	}
	
	@RequestMapping("/test/gradeOutput")
	public String gradeOutput(Grade grade) {
	
		int kor = grade.getKor();
		int math = grade.getMath();
		int eng=grade.getEng();
		
		double sum = kor+math+eng;
		double avg=(kor+math+eng)/3;
		
		grade.setSum(sum);
		grade.getSum();
		grade.setAvg(avg);
		grade.getAvg();
	
		return "test/gradeOutput";
	}
