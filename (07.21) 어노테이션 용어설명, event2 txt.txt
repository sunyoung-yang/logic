1. 게시판 작성시 아래의 용어 들에 대하여 간략히 정리하시오.
 - Controller 
	1. 사용자의 요청이 진입하는 지점이며, 요청에 따라 어떤 처리를 할지 결정한다.
	2. Controller는 결정만 하고 실질적 처리는 Service가 담당. 
	3. 사용자에게 view를 응답으로 보내준다.

 - Command 
	1. 커맨드 자체를 객체화할 수 있다.

 - DAO
	1. DataBase의 data에 접근하기 위한 객체
	2. 웹서버는 DB와 연결하기 위해서 매번 커넥션 객체를 생성하는데, 이것을 해결하기 위해 나온것이 컨넥션 풀입니다. 
	   ConnectionPool 이란 connection 객체를 미리 만들어 놓고 그것을 가져다 쓰는것입니다. 
	   또 다쓰고 난 후에는 반환해 놓는 것.

 - @Controller : 사용할 컨트롤러를 선언

 - @Service :  해당 클래스는 서비스로 활용됨을 알려주려고 @Service 어노테이션을 사용합니다.

 -  @Repository : 해당 클래스가 DAO라는 것을 알리기 위해 사용한다.


2.@Component의  역할 과 세팅은 어디서 하며, 어떠한 의미인지 설명하시오.
 - Request 파라미터의 갯수가 증가할 때 마다 코드 길이도 길어진다. 
   불편함을 줄이기 위해 커맨드(Command) 객체라는 것을 지원하고 있다. 
   스프링은 요청 파라미터의 값을 커맨드 객체에 담아주는 기능을 제공한다.
   커맨드 객체는 아래와 같이 @RequestMapping 어노테이션이 적용된 메서드의 파라미터로 사용된다.

	@RequestMapping(value = "register/step3", method = RequestMethod.POST)
	public String handleStep3(RegisterRequest regReq) {
			...
	}
스프링 MVC가 handlerStep3() 메서드에 전달할 RegisterRequest 객체를 생성하고, 그 객체의 set 메서드를 이용해서 일치하는 요청 파라미터의 값을 전달하게 된다.
※ @ModelAttribute 랑 커맨드 객체는 같은 것이라고 한다. 
   다만, @ModelAttribute는 뷰에서 사용할 모델의 이름을 변경할 때 사용 된다고 한다.

 - @Component와 그 자식들을 객체를 생성해서 ioc컨테이너에 집어넣어라 (객체 생성할 필요 없어)
 - @Component 자식들 : @Controller, @Service, @Repository


3.Command 객체에 대하여 설명하시오.
 - 각종 속성들을 자동적으로 커맨드 객체에 바인딩 하여 HttpServletRequest 보다 코드가 간단.
 - command 객체는 controller에서 view로 자동 전달됨
 - @ModelAttribute를 이용하여 다른 이름 지정 가능


4.아래의 방식으로 게시판을 완성하시오.(댓글 포함)
 @Controller, @Service, @Repository


5. input 박스에서 type=button 과 type=submit일때의 차이를 자바 스크립트 예제로 설명하시오.

[type=button]

<script>
	window.onload = function(){
		var sbmBtn = document.getElementById("sbmBtn");
		sbmBtn.onclick = function() {
			if(document.getElementById("uId").value == "") {
				alert("user id blank!!");
			} else if(document.getElementById("uPw").value == "") {
				alert("user pw blank!!");
			} else {
				alert("login ok!!");
				document.getElementById("loginForm").submit();
			}
		};
			
		var resBtn = document.getElementById("resBtn");
		resBtn.onclick = function() {
			alert("reset ok!!");
			document.getElementById("loginForm").reset();
		};		
	}
</script>


<body>
	<input id="sbmBtn" type="button" value="SUBMIT"> 
	<input id="resBtn" type="button" value="RESET">
	</form>
</body>
---------------------------------------------------------------
[type=submit]

<script>
		
	window.onload = function(){
		var lf = document.getElementById("loginForm");
		lf.onsubmit = function() {
		if(document.getElementById("uId").value == "") {
			alert("user id blank!!");
			return false;
		} else if(document.getElementById("uPw").value == "") {
			alert("user pw blank!!");
			return false;
		} else {
			alert("login ok!!");
			return true;
			}
		};
	}
</script>


<body>
	<form id="loginForm" action="http://www.google.com">
		USER ID : <input id="uId" type="text" name="uId"><br>
		USER PW : <input id="uPw" type="password" name="upw"><br>
		<input id="sbmBtn" type="submit" value="SUBMIT">
		<input id="resBtn" type="reset" value="RESET">
	</form>
</body>


6.javascript 와 jquery 의 차이는?
<javascript> 
1. 기능이 조금만 많아져도 코드가 복잡해짐
2. DOM과 관련된 기능은 브라우저 이슈가 있음

<jquery> 
1. 자주 사용하는 기능을 함수(라이브러리)로 감싸서 쉽게 사용 가능
2. DOM과 관련된 기능을 브라우저에 상관없이 실행 가능
3. CSS선택자를 그대로 사용   